{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Task 1: Student Pass/Fail Prediction\n",
    "### Objective:\n",
    "Build a classifier to predict if a student has passed based on their study hours and attendance.\n",
    "\n",
    "### Project Steps:\n",
    "**1. Dataset Selection**  \n",
    "- Create or select a dataset with columns:\n",
    "  - `Study Hours`: Number of hours a student studies per week\n",
    "  - `Attendance`: Percentage of classes attended\n",
    "  - `Pass`: Binary column (1 = Pass, 0 = Fail)\n",
    "\n",
    "**2. Tasks to Perform**\n",
    "- **Pre-processing**:  \n",
    "  - Handle missing values\n",
    "  - Normalize or standardize features\n",
    "  - Encode the target feature `Pass`\n",
    "- **Model Building**:  \n",
    "  - Train a Logistic Regression classifier\n",
    "  - Use train/test split (e.g., 80/20)\n",
    "- **Evaluation**:  \n",
    "  - Accuracy, Confusion Matrix, Classification Report\n",
    "- **Insights**:  \n",
    "  - Key predictors of student performance"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Task 2: Sentiment Analysis with Natural Language Processing\n",
    "### Objective:\n",
    "Create a classifier to classify sentences into positive or negative sentiment.\n",
    "\n",
    "### Project Steps:\n",
    "**1. Dataset Selection**  \n",
    "- Use a dataset like IMDB Reviews or CSV file with columns:\n",
    "  - `Review Text`: Text review/comment\n",
    "  - `Sentiment`: Sentiment label (Positive/Negative)\n",
    "\n",
    "**2. Tasks to Perform**\n",
    "- **Text Preprocessing**:\n",
    "  - Lowercase text\n",
    "  - Remove punctuations, stopwords, special characters\n",
    "  - Tokenization\n",
    "  - Optional: Lemmatization/Stemming\n",
    "- **Text Vectorization**:\n",
    "  - Convert text to numerical format using TF-IDF or CountVectorizer\n",
    "- **Model Building**:\n",
    "  - Train a classification model (e.g., Logistic Regression, Naive Bayes)\n",
    "- **Model Evaluation**:\n",
    "  - Accuracy, Confusion Matrix\n",
    "  - Precision, Recall, F1-score\n",
    "- **Insights**:\n",
    "  - Which words or features contribute most to positive/negative classification"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# General Guidelines\n",
    "- **Libraries**:  \n",
    "  - For Data Analysis: `pandas`, `numpy`, `matplotlib`, `seaborn`\n",
    "  - For Preprocessing & Modeling: `nltk`, `re`, `scikit-learn`\n",
    "- **Train/Test Split**:  \n",
    "  - Use a train-test ratio, e.g., 80:20 or k-fold cross-validation\n",
    "- **Documentation**:  \n",
    "  - Include clear steps for preprocessing, model training, evaluation\n",
    "  - Use visualizations (charts, confusion matrix) and summary tables"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Deadline & Submission Notes\n",
    "- Submit the project within 7 days of task distribution\n",
    "- Plagiarism will lead to disqualification\n",
    "- Keep your code modular, well-commented, and clean"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "name": "python",
   "version": "3.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
